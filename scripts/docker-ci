#!/bin/bash

# Docker CI Script
# This script runs lint, test, and build in a Docker environment and then cleans up

# Set base paths
SCRIPT_DIR="$( cd "$( dirname "$(readlink -f "${BASH_SOURCE[0]}")" )" && pwd )"
PROJECT_ROOT="$( cd "$SCRIPT_DIR/.." && pwd )"
DOCKER_DIR="$PROJECT_ROOT/docker"
CONFIG_DIR="$PROJECT_ROOT"

# Color definitions for output
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Function to check if Docker is running
check_docker() {
    if ! docker info > /dev/null 2>&1; then
        echo -e "${RED}Error: Docker is not running. Please start Docker Desktop first.${NC}"
        exit 1
    fi
}

# Function to clean up any existing Docker containers for this project
clean_docker() {
    echo -e "${YELLOW}Checking for existing Docker containers...${NC}"
    if docker ps -a | grep -q "Matic-Docker-App"; then
        echo -e "${YELLOW}Found existing container, cleaning up...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" down --volumes
        echo -e "${GREEN}✓ Existing Docker environment cleaned up${NC}"
    fi
}

# Function to check environment file
check_env() {
    if [ ! -f "${CONFIG_DIR}/.env" ]; then
        echo -e "${YELLOW}Warning: .env not found${NC}"
        if [ -f "${CONFIG_DIR}/.env.example" ]; then
            cp "${CONFIG_DIR}/.env.example" "${CONFIG_DIR}/.env"
            echo -e "${GREEN}Created .env from example. Please update with your credentials.${NC}"
        else
            echo -e "${RED}Error: .env.example not found${NC}"
            exit 1
        fi
    fi
}

# Function to display usage information
show_usage() {
    echo "Usage: $0 {all|lint|test|build}"
    echo
    echo "Commands:"
    echo "  all    - Run lint, test, and build in sequence"
    echo "  lint   - Run only linting"
    echo "  test   - Run only tests"
    echo "  build  - Run only build"
}

# Function to run a command in Docker and return its exit status
run_in_docker() {
    local command=$1
    local description=$2
    
    echo -e "${YELLOW}Running $description in Docker...${NC}"
    
    if docker compose -f "${DOCKER_DIR}/docker-compose.yml" exec -T app npm run $command; then
        echo -e "${GREEN}✓ $description completed successfully${NC}"
        return 0
    else
        echo -e "${RED}✗ $description failed${NC}"
        return 1
    fi
}

# Main function to run all checks
run_all_checks() {
    local exit_status=0
    local lint_status=0
    local test_status=0
    local build_status=0
    
    # Run lint
    run_in_docker "lint" "linting"
    lint_status=$?
    
    # Run typecheck
    run_in_docker "typecheck" "type checking"
    if [ $? -ne 0 ]; then
        lint_status=1
    fi
    
    # Run format check
    run_in_docker "format:check" "format checking"
    if [ $? -ne 0 ]; then
        lint_status=1
    fi
    
    # Run test coverage (includes all tests)
    run_in_docker "test:coverage" "test coverage"
    test_status=$?
    
    # Run build with the Docker-specific build command that skips linting
    run_in_docker "build:docker" "build"
    build_status=$?
    
    # Set exit status based on all operations
    if [ $lint_status -ne 0 ] || [ $test_status -ne 0 ] || [ $build_status -ne 0 ]; then
        exit_status=1
    fi
    
    return $exit_status
}

# Main command handler
case "$1" in
    "all")
        check_docker
        check_env
        
        # Purge Docker environment to guarantee memory space
        echo -e "${YELLOW}Purging Docker environment to guarantee memory space...${NC}"
        npm run docker:purge
        echo -e "${GREEN}✓ Docker environment purged${NC}"
        
        echo -e "${YELLOW}Starting Docker environment...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" up -d
        
        # Install dependencies to ensure environment consistency
        echo -e "${YELLOW}Installing dependencies in Docker container...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" exec -T app npm install
        echo -e "${GREEN}✓ Dependencies installed${NC}"
        
        # Set environment variables for memory optimization
        echo -e "${YELLOW}Setting memory optimization for Docker build...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" exec -T app sh -c 'export NODE_OPTIONS="--max_old_space_size=2048"'
        echo -e "${GREEN}✓ Memory optimization set${NC}"
        
        # Run all checks
        if run_all_checks; then
            echo -e "${GREEN}✓ All checks completed successfully${NC}"
            EXIT_STATUS=0
        else
            echo -e "${RED}✗ Some checks failed${NC}"
            EXIT_STATUS=1
        fi
        
        # Clean up Docker environment
        echo -e "${YELLOW}Cleaning up Docker environment...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" down
        echo -e "${GREEN}✓ Docker environment cleaned up${NC}"
        
        exit $EXIT_STATUS
        ;;
        
    "lint")
        check_docker
        check_env
        
        # Clean up any existing containers first
        clean_docker
        
        echo -e "${YELLOW}Starting Docker environment...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" up -d
        
        # Install dependencies to ensure environment consistency
        echo -e "${YELLOW}Installing dependencies in Docker container...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" exec -T app npm install
        echo -e "${GREEN}✓ Dependencies installed${NC}"
        
        # Set environment variables for memory optimization
        echo -e "${YELLOW}Setting memory optimization for Docker build...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" exec -T app sh -c 'export NODE_OPTIONS="--max_old_space_size=2048"'
        echo -e "${GREEN}✓ Memory optimization set${NC}"
        
        # Run lint checks
        LINT_STATUS=0
        TYPE_STATUS=0
        FORMAT_STATUS=0
        
        run_in_docker "lint" "linting"
        LINT_STATUS=$?
        
        run_in_docker "typecheck" "type checking"
        TYPE_STATUS=$?
        
        run_in_docker "format:check" "format checking"
        FORMAT_STATUS=$?
        
        # If format check fails, run format:list to show detailed issues
        if [ $FORMAT_STATUS -ne 0 ]; then
            echo -e "${YELLOW}Showing detailed formatting issues:${NC}"
            run_in_docker "format:list" "format listing"
        fi
        
        if [ $LINT_STATUS -eq 0 ] && [ $TYPE_STATUS -eq 0 ] && [ $FORMAT_STATUS -eq 0 ]; then
            echo -e "${GREEN}✓ All lint checks completed successfully${NC}"
            EXIT_STATUS=0
        else
            echo -e "${RED}✗ Some lint checks failed${NC}"
            EXIT_STATUS=1
        fi
        
        # Clean up Docker environment
        echo -e "${YELLOW}Cleaning up Docker environment...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" down
        echo -e "${GREEN}✓ Docker environment cleaned up${NC}"
        
        exit $EXIT_STATUS
        ;;
        
    "test")
        check_docker
        check_env
        
        # Clean up any existing containers first
        clean_docker
        
        echo -e "${YELLOW}Starting Docker environment...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" up -d
        
        # Install dependencies to ensure environment consistency
        echo -e "${YELLOW}Installing dependencies in Docker container...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" exec -T app npm install
        echo -e "${GREEN}✓ Dependencies installed${NC}"
        
        # Set environment variables for memory optimization
        echo -e "${YELLOW}Setting memory optimization for Docker build...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" exec -T app sh -c 'export NODE_OPTIONS="--max_old_space_size=2048"'
        echo -e "${GREEN}✓ Memory optimization set${NC}"
        
        # Run tests with formatted output
        if run_in_docker "test:formatted" "tests with formatted output"; then
            echo -e "${GREEN}✓ All tests completed successfully${NC}"
            EXIT_STATUS=0
        else
            echo -e "${RED}✗ Some tests failed${NC}"
            EXIT_STATUS=1
        fi
        
        # Clean up Docker environment
        echo -e "${YELLOW}Cleaning up Docker environment...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" down
        echo -e "${GREEN}✓ Docker environment cleaned up${NC}"
        
        exit $EXIT_STATUS
        ;;
        
    "build")
        check_docker
        check_env
        
        # Clean up any existing containers first
        clean_docker
        
        echo -e "${YELLOW}Starting Docker environment...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" up -d
        
        # Install dependencies to ensure environment consistency
        echo -e "${YELLOW}Installing dependencies in Docker container...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" exec -T app npm install
        echo -e "${GREEN}✓ Dependencies installed${NC}"
        
        # Set environment variables for memory optimization
        echo -e "${YELLOW}Setting memory optimization for Docker build...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" exec -T app sh -c 'export NODE_OPTIONS="--max_old_space_size=2048"'
        echo -e "${GREEN}✓ Memory optimization set${NC}"
        
        # Run build with the Docker-specific build command that skips linting
        if run_in_docker "build:docker" "build"; then
            echo -e "${GREEN}✓ Build completed successfully${NC}"
            EXIT_STATUS=0
        else
            echo -e "${RED}✗ Build failed${NC}"
            EXIT_STATUS=1
        fi
        
        # Clean up Docker environment
        echo -e "${YELLOW}Cleaning up Docker environment...${NC}"
        docker compose -f "${DOCKER_DIR}/docker-compose.yml" down
        echo -e "${GREEN}✓ Docker environment cleaned up${NC}"
        
        exit $EXIT_STATUS
        ;;
        
    *)
        show_usage
        exit 1
        ;;
esac
